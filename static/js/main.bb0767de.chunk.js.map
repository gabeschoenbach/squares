{"version":3,"sources":["Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","props","myRef","React","createRef","state","gridLength","gridSize","gridInfo","padding","colorBarInfo","possibleGrids","paintColor","N","length","scalingColorBar","d3","domain","range","colorNames","colorBars","i","color","push","scalingGraph","squares","j","square","arrayNs","map","Dropdown","Item","onClick","setState","populateGridInfo","populateColorBarInfo","event","d","curr_x","x","curr_y","y","scalingGraphInverse","rounded_x","Math","round","id","size","style","classed","this","isSameColor","document","title","drag","on","dragmove","remove","current","append","attr","selectAll","data","enter","handleMouseOver","handleMouseOut","handleGraphClicked","call","handleColorClicked","DropdownButton","getDropdownButtons","ref","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb0767de.chunk.js","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport './Grid.css';\n\nexport default class Grid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.state = {\n            gridLength: 600,\n            gridSize: 6,\n            gridInfo: [],\n            padding: 10,\n            colorBarInfo: [],\n            possibleGrids:[2,3,4,5,6,7,8,9,10],\n            paintColor: \"white\",\n        };\n    }\n\n    populateColorBarInfo(N, length, padding) {\n        var scalingColorBar = d3.scaleLinear()\n            .domain([0,N])\n            .range([padding, length/2-padding]);\n\n        var colorNames = d3.scaleOrdinal()\n            .domain([0,N])\n            .range(d3.schemeSet3);\n\n        var colorBars = [];\n        for (let i = 0; i < N; i++) {\n            var color = {\n                \"x\":scalingColorBar(i),\n                \"y\":padding,\n                \"size\":scalingColorBar(1)-scalingColorBar(0),\n                \"color\":colorNames(i)\n            }\n            colorBars.push(color);\n        }\n        return colorBars;\n    }\n\n    populateGridInfo(N, length, padding) {\n        var scalingGraph = d3.scaleLinear()\n            .domain([0, N])\n            .range([padding, length-padding]);\n\n        var squares = [];\n        for (let i = 0; i < N; i++) {\n            for (let j = 0; j < N; j++) {\n                var square = {\n                    \"id\":(N*i) + j,\n                    \"size\":scalingGraph(1)-scalingGraph(0),\n                    \"x\":scalingGraph(j),\n                    \"y\":scalingGraph(i),\n                }\n            squares.push(square);\n            }\n        }\n        return squares;\n    }\n\n    getDropdownButtons(arrayNs, length, padding) {\n        return arrayNs.map(N => {\n            return <Dropdown.Item onClick={() => this.setState({\n                gridSize: N,\n                gridInfo: this.populateGridInfo(N, length, padding),\n                colorBarInfo: this.populateColorBarInfo(N, length, padding),\n            })\n            }>\n                {N}_\n            </Dropdown.Item>\n        })\n    }\n\n    dragmove(event, d) {\n        var curr_x = event.x;\n        var curr_y = event.y;\n        var scalingGraphInverse = d3.scaleLinear()\n            .domain([0, 600])\n            .range([0,6])\n        var rounded_x = Math.round(scalingGraphInverse(curr_x));\n        var rounded_y = Math.round(scalingGraphInverse(curr_y));\n        var id = rounded_y * 6 + rounded_x;\n\n        var colorSpecified = d3.select(\".colorClicked\").size() === 1\n        var color = colorSpecified ? d3.select(\".colorClicked\").style(\"fill\") : \"white\";\n        d3.select(`[id=\"${id}\"]`).style(\"fill\", color)\n    }\n\n    handleColorClicked() {\n        d3.selectAll(\".colorClicked\")\n            .classed(\"colorClicked\", false)\n        d3.select(this)\n            .classed(\"colorClicked\", true)\n    }\n\n    handleGraphClicked() {\n        var isClicked = d3.select(\".colorClicked\").size() === 1\n        var color = isClicked ? d3.select(\".colorClicked\").style(\"fill\") : \"white\"\n        var isSameColor = d3.select(this).style(\"fill\") === color\n        d3.select(this)\n            .style(\"fill\", isSameColor ? \"white\" : color)       \n    }\n\n    handleMouseOver() {\n        d3.select(this).classed(\"hovered\", true)\n    }\n\n    handleMouseOut() {\n        d3.select(this).classed(\"hovered\", false)\n    }\n\n    componentDidMount() {\n        document.title = \"Exploring Grids\"\n        var N = this.state.gridSize;\n        var length = this.state.gridLength;\n        var padding = this.state.padding;\n        this.setState({\n            colorBarInfo: this.populateColorBarInfo(N, length, padding),\n            gridInfo: this.populateGridInfo(N, length, padding),\n        });\n    }\n\n    componentDidUpdate() {\n\n        var drag = d3.drag()\n            .on(\"drag\", this.dragmove)\n\n        d3.selectAll(\"svg\").remove()\n\n        var container = d3.select(this.myRef.current)\n            .append(\"svg\")\n            .attr(\"width\", this.state.gridLength)\n            .attr(\"height\", this.state.gridLength)\n            // .style(\"border\", \"solid 1px\")\n            .classed(\"container\", true)\n\n        var graphContainer = container\n            .append(\"svg\")\n            .attr(\"width\", this.state.gridLength)\n            .attr(\"height\", this.state.gridLength)\n        var squares = graphContainer          \n            .selectAll(\"rect\")\n            .data(this.state.gridInfo)\n            .enter()\n            .append(\"rect\");\n        var squareAttributes = squares\n            .attr(\"x\", function (d) { return d.x; })\n            .attr(\"y\", function (d) { return d.y; })\n            .attr(\"width\", function (d) { return d.size; })\n            .attr(\"height\", function (d) { return d.size; })\n            .attr(\"id\", function (d) { return `${d.id}`; })\n            .classed(\"square\", true)\n        var squareActions = squareAttributes\n            .on(\"mouseover\", this.handleMouseOver)\n            .on(\"mouseout\", this.handleMouseOut)\n            .on(\"click\", this.handleGraphClicked)\n            .call(drag)\n\n        var colorsContainer = d3.select(this.myRef.current)\n            .append(\"svg\")\n            .attr(\"width\", this.state.gridLength/2)\n            .attr(\"height\", this.state.colorBarInfo[0].size + 2*this.state.padding)\n        var colors = colorsContainer\n            .selectAll(\"rect\")\n            .data(this.state.colorBarInfo)\n            .enter()\n            .append(\"rect\")\n        var colorAttributes = colors\n            .attr(\"x\", function (d) { return d.x; })\n            .attr(\"y\", function (d) { return d.y; })\n            .attr(\"width\", function (d) { return d.size; })\n            .attr(\"height\", function (d) { return d.size; })\n            .style(\"fill\", function (d) { return d.color; })\n            .classed(\"color\", true)\n        var colorActions = colorAttributes\n            .on(\"mouseover\", this.handleMouseOver)\n            .on(\"mouseout\", this.handleMouseOut)\n            .on(\"click\", this.handleColorClicked)\n        return\n    }\n\n\n    render() {        \n        return (\n            <div>\n                <div>\n                    <DropdownButton id=\"dropdown\" title=\"Grid Size\">\n                        {this.getDropdownButtons(\n                            this.state.possibleGrids, \n                            this.state.gridLength,\n                            this.state.padding,\n                            )\n                        }\n                    </DropdownButton>\n                </div>\n                <div ref={this.myRef}>\n                </div>\n            </div>\n        )\n    }\n}","import Grid from './Grid';\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Exploring Grids</h1>\n        <Grid/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}